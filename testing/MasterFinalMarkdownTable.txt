// MASTER Final Markdown Table for Approval Action - Combines ALL award types (HRO, Hines Hero, ICARE)
// Use this in your Approval action's Details field (Expression tab): outputs('Compose.Master.Table')

// Contents of the "Compose.Master.Table" action (Markdown formatted with safe literal line breaks):
@{concat(
'| **FIELD** | **VALUE** |
|:----------|:----------|
',
if(not(equals(outputs('Get_Refreshed_Item_Info')?['body/Text_AwardType'],'None provided')), 
   concat('| **Award Type** | ', outputs('Get_Refreshed_Item_Info')?['body/Text_AwardType'], ' |
'), 
   ''),
if(not(equals(triggerOutputs()?['body/field_5'],'None provided')), 
   concat('| **Nominee''s Name** | ', triggerOutputs()?['body/field_5'], ' |
'), 
   ''),
if(not(equals(formatDateTime(convertTimeZone(triggerOutputs()?['body/field_7'], 'UTC', 'Central Standard Time'), 'MM/dd/yyyy hh:mm tt'),'None provided')), 
   concat('| **Event Date** | ', formatDateTime(convertTimeZone(triggerOutputs()?['body/field_7'], 'UTC', 'Central Standard Time'), 'MM/dd/yyyy hh:mm tt'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Location.Text'),'None provided')), 
   concat('| **Location** | ', outputs('Compose.Location.Text'), ' |
'), 
   ''),
if(not(equals(triggerOutputs()?['body/SafetyBoolean'],'None provided')), 
   concat('| **Event is a safety concern** | ', triggerOutputs()?['body/SafetyBoolean'], ' |
'), 
   ''),
if(not(equals(triggerOutputs()?['body/NursingBoolean'],'No')), 
   concat('| **Nominee part of Nursing Service** | ', triggerOutputs()?['body/NursingBoolean'], ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HROContext_Text')), equals(outputs('Compose_HROContext_Text'),'None provided'))), 
   concat('| **HRO Context** | ', outputs('Compose_HROContext_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HROActions_Text')), equals(outputs('Compose_HROActions_Text'),'None provided'))), 
   concat('| **HRO Actions** | ', outputs('Compose_HROActions_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HROResults_Text')), equals(outputs('Compose_HROResults_Text'),'None provided'))), 
   concat('| **HRO Results** | ', outputs('Compose_HROResults_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HROPrinciples_Text')), equals(outputs('Compose_HROPrinciples_Text'),'None provided'))), 
   concat('| **HRO Principles** | ', outputs('Compose_HROPrinciples_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HROClinicOrNonclinic_Text')), equals(outputs('Compose_HROClinicOrNonclinic_Text'),'None provided'))), 
   concat('| **Clinical or Non-clinical** | ', outputs('Compose_HROClinicOrNonclinic_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HinesHero_Summary_Text')), equals(outputs('Compose_HinesHero_Summary_Text'),'None provided'))), 
   concat('| **Hines Hero Summary** | ', outputs('Compose_HinesHero_Summary_Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_HinesHero_Details_Text')), equals(outputs('Compose_HinesHero_Details_Text'),'None provided'))), 
   concat('| **Hines Hero Details** | ', outputs('Compose_HinesHero_Details_Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Integrity.Text'),'None provided')), 
   concat('| **Integrity Comments** | ', outputs('Compose.Integrity.Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Commitment.Text'),'None provided')), 
   concat('| **Commitment Comments** | ', outputs('Compose.Commitment.Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Advocacy.Text'),'None provided')), 
   concat('| **Advocacy Comments** | ', outputs('Compose.Advocacy.Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Respect.Text'),'None provided')), 
   concat('| **Respect Comments** | ', outputs('Compose.Respect.Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.Excellence.Text'),'None provided')), 
   concat('| **Excellence Comments** | ', outputs('Compose.Excellence.Text'), ' |
'), 
   ''),
if(not(equals(outputs('Compose.AdditionalComments.Text'),'None provided')), 
   concat('| **Additional Comments** | ', outputs('Compose.AdditionalComments.Text'), ' |
'), 
   ''),
if(not(or(empty(outputs('Compose_NomineeServiceLine_Text')), equals(outputs('Compose_NomineeServiceLine_Text'),'None provided'))), 
   concat('| **Nominee''s Service Line** | ', outputs('Compose_NomineeServiceLine_Text'), ' |
'), 
   '')
)}

///////////////////////////////////////////////////////////////////////
// Final Approval Action Details (combines intro text + table):
@{concat(
'A new award nomination packet was submitted to you (Award Packet #', triggerOutputs()?['body/ID'], '), as a member of the Hines Award Committee Triage Team. Please review the details below, and either re-route this packet to the appropriate award sub-committee OR return this back to sender with your free-text comments to request follow-up/additional information.

You can interact with this award nomination within [Microsoft Teams](msteams://teams.microsoft.com/l/entity/2d4edd75-5a69-41da-bead-44c3a268ece8/approvals) or [Microsoft Approvals](https://make.gov.powerautomate.us/environments/Default-e95f1b23-abaf-45ee-821d-b7ab251ab3bf/approvals/received).

', 
outputs('Compose.Master.Table')
)}

///////////////////////////////////////////////////////////////////////
// Alternative: Simple approach if markdown tables don't render properly in Approvals
// Use this version in Compose.Master.Table if the markdown table version has issues:

@{concat(
'**AWARD NOMINATION DETAILS**

',
if(not(equals(outputs('Get_Refreshed_Item_Info')?['body/Text_AwardType'],'None provided')), 
   concat('**Award Type:**  ', outputs('Get_Refreshed_Item_Info')?['body/Text_AwardType'], '

'), 
   ''),
if(not(equals(triggerOutputs()?['body/field_5'],'None provided')), 
   concat('**Nominee''s Name:**  ', triggerOutputs()?['body/field_5'], '

'), 
   ''),
if(not(equals(formatDateTime(convertTimeZone(triggerOutputs()?['body/field_7'], 'UTC', 'Central Standard Time'), 'MM/dd/yyyy hh:mm tt'),'None provided')), 
   concat('**Event Date:**  ', formatDateTime(convertTimeZone(triggerOutputs()?['body/field_7'], 'UTC', 'Central Standard Time'), 'MM/dd/yyyy hh:mm tt'), '

'), 
   ''),
if(not(equals(outputs('Compose.Location.Text'),'None provided')), 
   concat('**Location:**  ', outputs('Compose.Location.Text'), '

'), 
   ''),
if(not(equals(triggerOutputs()?['body/SafetyBoolean'],'None provided')), 
   concat('**Event is a safety concern:**  ', triggerOutputs()?['body/SafetyBoolean'], '

'), 
   ''),
if(not(equals(triggerOutputs()?['body/NursingBoolean'],'No')), 
   concat('**Nominee part of Nursing Service:**  ', triggerOutputs()?['body/NursingBoolean'], '

'), 
   ''),
if(not(or(empty(outputs('Compose_HROContext_Text')), equals(outputs('Compose_HROContext_Text'),'None provided'))), 
   concat('**HRO Context:**  ', outputs('Compose_HROContext_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HROActions_Text')), equals(outputs('Compose_HROActions_Text'),'None provided'))), 
   concat('**HRO Actions:**  ', outputs('Compose_HROActions_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HROResults_Text')), equals(outputs('Compose_HROResults_Text'),'None provided'))), 
   concat('**HRO Results:**  ', outputs('Compose_HROResults_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HROPrinciples_Text')), equals(outputs('Compose_HROPrinciples_Text'),'None provided'))), 
   concat('**HRO Principles:**  ', outputs('Compose_HROPrinciples_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HROClinicOrNonclinic_Text')), equals(outputs('Compose_HROClinicOrNonclinic_Text'),'None provided'))), 
   concat('**Clinical or Non-clinical:**  ', outputs('Compose_HROClinicOrNonclinic_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HinesHero_Summary_Text')), equals(outputs('Compose_HinesHero_Summary_Text'),'None provided'))), 
   concat('**Hines Hero Summary:**  ', outputs('Compose_HinesHero_Summary_Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_HinesHero_Details_Text')), equals(outputs('Compose_HinesHero_Details_Text'),'None provided'))), 
   concat('**Hines Hero Details:**  ', outputs('Compose_HinesHero_Details_Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.Integrity.Text'),'None provided')), 
   concat('**Integrity Comments:**  ', outputs('Compose.Integrity.Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.Commitment.Text'),'None provided')), 
   concat('**Commitment Comments:**  ', outputs('Compose.Commitment.Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.Advocacy.Text'),'None provided')), 
   concat('**Advocacy Comments:**  ', outputs('Compose.Advocacy.Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.Respect.Text'),'None provided')), 
   concat('**Respect Comments:**  ', outputs('Compose.Respect.Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.Excellence.Text'),'None provided')), 
   concat('**Excellence Comments:**  ', outputs('Compose.Excellence.Text'), '

'), 
   ''),
if(not(equals(outputs('Compose.AdditionalComments.Text'),'None provided')), 
   concat('**Additional Comments:**  ', outputs('Compose.AdditionalComments.Text'), '

'), 
   ''),
if(not(or(empty(outputs('Compose_NomineeServiceLine_Text')), equals(outputs('Compose_NomineeServiceLine_Text'),'None provided'))), 
   concat('**Nominee''s Service Line:**  ', outputs('Compose_NomineeServiceLine_Text'), '

'), 
   '')
)}

///////////////////////////////////////////////////////////////////////
// FIELD REFERENCE GUIDE - All possible fields from all three award types:

// COMMON FIELDS (appear in all award types):
// - Award Type
// - Nominee's Name
// - Event Date  
// - Location
// - Event is a safety concern
// - Additional Comments
// - Nominee's Service Line

// HRO-SPECIFIC FIELDS:
// - HRO Context
// - HRO Actions
// - HRO Results
// - HRO Principles
// - Clinical or Non-clinical

// HINES HERO-SPECIFIC FIELDS:
// - Hines Hero Summary
// - Hines Hero Details

// ICARE-SPECIFIC FIELDS:
// - Nominee part of Nursing Service (special condition: shows if NOT 'No')
// - Integrity Comments
// - Commitment Comments
// - Advocacy Comments
// - Respect Comments
// - Excellence Comments

// USAGE NOTES:
// - This master template dynamically shows only relevant fields
// - Fields automatically hide if empty/"None provided"
// - Use outputs('Compose.Master.Table') in Approval action
// - Fallback simple format available if markdown tables don't render
