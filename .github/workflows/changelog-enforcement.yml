# =============================================================================
#  WORKFLOW: changelog-enforcement.yml
#  Author: Kyle J. Coder
#  License: Apache License, Version 2.0 (see https://www.apache.org/licenses/LICENSE-2.0)
#  Copyright 2025 Kyle J. Coder
#
#  DESCRIPTION (For End Users):
#    This GitHub Actions workflow enforces CHANGELOG.md updates for the Employee Recognition App.
#    It validates the existence, format, and content quality of CHANGELOG.md on all PRs and pushes.
#    Ensures all significant changes are documented and follow project standards.
#
#  USAGE:
#    - Runs automatically on pull requests and pushes to main/develop.
#    - Review workflow output for any required documentation actions.
#
#  EDUCATIONAL NOTES:
#    - Demonstrates best practices for documentation enforcement in CI/CD pipelines.
#    - Section comments are provided throughout for clarity.
#    - Designed for maintainability and extensibility for other Power Platform repos.
# =============================================================================

name: "Enforce CHANGELOG Updates"
permissions:
  contents: read
  pull-requests: write

# =====================
# MAIN WORKFLOW DEFINITION
# =====================

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  changelog-check:
    runs-on: ubuntu-latest
    name: "Verify CHANGELOG.md Updates"

    steps:
      # SECTION: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper diff

      # SECTION: Check for CHANGELOG.md
      - name: Check for CHANGELOG.md
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ùå CHANGELOG.md not found!"
            echo "::error::CHANGELOG.md file is required for this repository"
            exit 1
          fi
          echo "‚úÖ CHANGELOG.md exists"

      # SECTION: Validate CHANGELOG format
      - name: Validate CHANGELOG format
        run: |
          echo "üîç Validating CHANGELOG.md format..."


          # Check for basic required sections (allow '# Changelog' or '# CHANGELOG', case-insensitive)
          if ! grep -i -q "^# changelog" CHANGELOG.md; then
            echo "::error::Missing '# Changelog' or '# CHANGELOG' header (case-insensitive)"
            exit 1
          fi

          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "::error::Missing '## [Unreleased]' section"
            exit 1
          fi

          echo "‚úÖ CHANGELOG.md format is valid"

      # SECTION: Check for CHANGELOG updates (PR only)
      - name: Check for CHANGELOG updates (PR only)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Checking if CHANGELOG.md was updated in this PR..."

          # Get base branch (usually main)
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Comparing $BASE_SHA...$HEAD_SHA"

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if CHANGELOG.md was modified
          if echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
            echo "‚úÖ CHANGELOG.md was updated in this PR"
            exit 0
          fi

          # Check if changes require CHANGELOG update
          SIGNIFICANT_CHANGES=false

          # Check for source code changes (exclude workflow-only updates under .github/workflows)
          if echo "$CHANGED_FILES" | grep -E '\.(md|js|ts|py|ps1|json|yml|yaml)$|^(src|docs|scripts)/'; then
            # Exclude non-impacting files and workflow YAMLs from CHANGELOG requirement
            EXCLUDED_PATTERN='(^\.github/workflows/.*|README\.md|\.gitignore|package-lock\.json)$'
            if echo "$CHANGED_FILES" | grep -vE "$EXCLUDED_PATTERN" | grep -E '\.(md|js|ts|py|ps1|json|yml|yaml)$|^(src|docs|scripts)/'; then
              SIGNIFICANT_CHANGES=true
            fi
          fi

          if [ "$SIGNIFICANT_CHANGES" = "true" ]; then
            echo "‚ùå CHANGELOG.md must be updated!"
            echo "::error::Significant changes detected but CHANGELOG.md was not updated"
            echo "Files that require CHANGELOG documentation:"
            echo "$CHANGED_FILES" | grep -vE "$EXCLUDED_PATTERN" | grep -E '\.(md|js|ts|py|ps1|json|yml|yaml)$|^(src|docs|scripts)/' | sed 's/^/  - /'
            echo ""
            echo "Please update CHANGELOG.md under the [Unreleased] section before merging."
            exit 1
          else
            echo "‚ÑπÔ∏è No significant changes requiring CHANGELOG update"
          fi

      # SECTION: Check CHANGELOG content quality
      - name: Check CHANGELOG content quality
        run: |
          echo "üîç Checking CHANGELOG.md content quality..."

          # Check for proper semantic versioning format
          if ! grep -q "The format is based on.*Keep a Changelog" CHANGELOG.md; then
            echo "::warning::Consider adding 'Keep a Changelog' format reference"
          fi

          # Check for unreleased content
          UNRELEASED_SECTION=$(sed -n '/## \[Unreleased\]/,/## \[/p' CHANGELOG.md | head -n -1)

          if echo "$UNRELEASED_SECTION" | grep -q "### \(Added\|Changed\|Deprecated\|Removed\|Fixed\|Security\)"; then
            echo "‚úÖ [Unreleased] section contains categorized changes"
          else
            echo "::warning::[Unreleased] section appears empty or uncategorized"
          fi

          # Check for proper date format in version headers
          if grep -q "## \[.*\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" CHANGELOG.md; then
            echo "‚úÖ Version entries use proper date format (YYYY-MM-DD)"
          fi

      # SECTION: Suggest CHANGELOG improvements
      - name: Suggest CHANGELOG improvements
        if: failure()
        run: |
          echo ""
          echo "üí° CHANGELOG.md Improvement Suggestions:"
          echo "----------------------------------------"
          echo "1. Follow 'Keep a Changelog' format: https://keepachangelog.com/"
          echo "2. Use semantic versioning: https://semver.org/"
          echo "3. Categorize changes under [Unreleased] section:"
          echo "   ### Added - for new features"
          echo "   ### Changed - for changes in existing functionality"
          echo "   ### Deprecated - for soon-to-be removed features"
          echo "   ### Removed - for now removed features"
          echo "   ### Fixed - for any bug fixes"
          echo "   ### Security - in case of vulnerabilities"
          echo ""
          echo "4. Example entry:"
          echo "   ## [Unreleased]"
          echo "   ### Added"
          echo "   - New feature X that does Y"
          echo "   ### Fixed"
          echo "   - Bug fix for issue Z"

  # =====================
  # JOB: Advanced CHANGELOG Validation
  # =====================
  changelog-validation:
    runs-on: ubuntu-latest
    name: "Advanced CHANGELOG Validation"
    needs: changelog-check

    steps:
      # SECTION: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # SECTION: Setup PowerShell
      - name: Setup PowerShell
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            # This step ensures PowerShell is available for validation scripts
            Write-Host "PowerShell setup complete"

      # SECTION: Run comprehensive CHANGELOG validation
      - name: Run comprehensive CHANGELOG validation
        shell: pwsh
        run: |
          if (Test-Path "scripts/validate-changelog.ps1") {
            Write-Host "üîç Running comprehensive CHANGELOG validation..."
            & "./scripts/validate-changelog.ps1" -Detailed -ShowStatus

            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Comprehensive validation passed"
            } elseif ($LASTEXITCODE -eq 1) {
              Write-Host "‚ö†Ô∏è Validation passed with warnings"
            } else {
              Write-Host "‚ùå Validation failed"
              exit 1
            }
          } else {
            Write-Host "‚ÑπÔ∏è Advanced validation script not found, skipping"
          }

      # SECTION: Check for breaking changes
      - name: Check for breaking changes
        run: |
          echo "üîç Checking for potential breaking changes..."

          # Look for breaking change indicators in commit messages
          if git log --oneline $(git merge-base origin/main HEAD)..HEAD | grep -i "breaking\|BREAKING"; then
            echo "‚ö†Ô∏è Potential breaking changes detected in commit messages"
            echo "::warning::Consider documenting breaking changes in CHANGELOG.md"
          fi

          # Check if CHANGELOG mentions breaking changes
          if grep -i "breaking\|BREAKING" CHANGELOG.md; then
            echo "‚úÖ Breaking changes are documented in CHANGELOG.md"
          fi

 # =====================
  # JOB: Comment on PR with CHANGELOG status
  # =====================
  pr-comment:
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    needs: [changelog-check, changelog-validation]

    steps:
      # SECTION: Comment on PR
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;

            const success = (context.workflow_run && context.workflow_run.conclusion === 'success');
            const lines = [
              '## üìã CHANGELOG.md Status',
              '',
              success ? '‚úÖ **CHANGELOG.md validation passed!**' : '‚ùå **CHANGELOG.md validation failed!**',
              '',
              success ? '- CHANGELOG.md exists and is properly formatted' : 'Please ensure:',
              success ? '- Changes are appropriately documented' : '- CHANGELOG.md exists in the repository root',
              success ? '- Format follows Keep a Changelog standards' : '- Your changes are documented under `## [Unreleased]`',
              success ? '' : '- Use proper categories: Added, Changed, Deprecated, Removed, Fixed, Security',
              success ? '' : '- Follow [Keep a Changelog](https://keepachangelog.com/) format',
              '---',
              '*This check ensures proper documentation of all significant changes.*'
            ].filter(Boolean);

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: lines.join('\n')
            });
