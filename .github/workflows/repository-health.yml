# =============================================================================
#  WORKFLOW: repository-health.yml
#  Author: Kyle J. Coder
#  License: Apache License, Version 2.0 (see https://www.apache.org/licenses/LICENSE-2.0)
#  Copyright 2025 Kyle J. Coder
#
#  DESCRIPTION (For End Users):
#    This GitHub Actions workflow performs a comprehensive repository health check
#    for the Employee Recognition App. It validates structure, documentation, license
#    compliance, security, and Git repository health, and generates a health report.
#
#  USAGE:
#    - Runs automatically on push, pull request, or weekly schedule.
#    - Can be triggered manually via workflow_dispatch.
#    - Review the generated health report artifact for recommendations.
#
#  EDUCATIONAL NOTES:
#    - Demonstrates best practices for CI/CD health validation in open source projects.
#    - Section comments are provided throughout for clarity.
#    - Designed for maintainability and extensibility for other Power Platform repos.
# =============================================================================

name: Repository Health Check

# =====================
# MAIN WORKFLOW DEFINITION
# =====================

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: Repository Health Assessment

    # =====================
    # STEPS: Health Check Sequence
    # =====================

    steps:
      # SECTION: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # SECTION: Check repository structure
      - name: Check repository structure
        run: |
          echo "üèóÔ∏è Checking repository structure..."

          # Required files check

          # Allow NOTICE, CONTRIBUTING.md, and SECURITY.md to be in either root or docs/
          required_files=("README.md" "LICENSE" "CHANGELOG.md")
          optional_docs=("NOTICE" "CONTRIBUTING.md" "SECURITY.md")
          missing_files=()

          # Check required files in root
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          # Check optional docs in root or docs/
          for doc in "${optional_docs[@]}"; do
            if [ ! -f "$doc" ] && [ ! -f "docs/$doc" ]; then
              missing_files+=("$doc (root or docs/)" )
            fi
          done

          if [ ${#missing_files[@]} -eq 0 ]; then
            echo "‚úÖ All required files present (including docs in root or docs/)"
          else
            echo "‚ùå Missing required files: ${missing_files[*]}"
            exit 1
          fi

          # Directory structure check with detailed debugging
          echo "üîç Checking directory structure..."
          echo "üìÇ Current directory: $(pwd)"
          echo "üìÇ Full directory listing:"
          find . -maxdepth 1 -type d | sort

          required_dirs=("src" "docs" ".github" "scripts")
          missing_dirs=()

          for dir in "${required_dirs[@]}"; do
            echo "üîç Checking for directory: $dir"
            if [ ! -d "$dir" ]; then
              missing_dirs+=("$dir")
              echo "‚ùå Missing directory: $dir"
              # Additional debugging
              echo "   Attempting case-insensitive search..."
              find . -maxdepth 1 -type d -iname "$dir" | head -5
            else
              echo "‚úÖ Found directory: $dir"
              # Show some contents for verification
              echo "   Contents (first 5 items):"
              ls -la "$dir" | head -6
            fi
          done

          if [ ${#missing_dirs[@]} -eq 0 ]; then
            echo "‚úÖ All required directories present"
          else
            echo "‚ùå Missing required directories: ${missing_dirs[*]}"
            exit 1
          fi

          # Additional Power Platform structure validation
          echo "üîç Validating Power Platform project structure..."

          # Check for Power Platform source structure
          if [ -d "src/v1.0.x/v1.0.0" ]; then
            echo "‚úÖ Power Platform source structure found: src/v1.0.x/v1.0.0/"

            # Check individual Power Platform components
            pp_components=("power-apps" "power-automate" "sharepoint" "powershell")
            for component in "${pp_components[@]}"; do
              if [ -d "src/v1.0.x/v1.0.0/$component" ]; then
                echo "‚úÖ Found Power Platform component: $component"
              else
                echo "‚ö†Ô∏è Missing Power Platform component: $component"
              fi
            done
          else
            echo "‚ö†Ô∏è Power Platform source structure not found at expected location"
          fi

          # Check for PowerShell scripts in both locations
          root_scripts=$(find scripts -name "*.ps1" 2>/dev/null | wc -l)
          pp_scripts=$(find src/v1.0.x/v1.0.0/powershell -name "*.ps1" 2>/dev/null | wc -l)

          echo "üìä PowerShell scripts found:"
          echo "  - Root scripts/ directory: $root_scripts scripts"
          echo "  - Power Platform powershell/ directory: $pp_scripts scripts"

          if [ $root_scripts -gt 0 ] || [ $pp_scripts -gt 0 ]; then
            echo "‚úÖ PowerShell automation scripts available"
          else
            echo "‚ö†Ô∏è No PowerShell scripts found"
          fi

      # SECTION: Validate documentation
      - name: Validate documentation
        run: |
          echo "üìö Validating documentation..."

          # Check README.md size (should be comprehensive)
          readme_size=$(wc -c < README.md)
          if [ $readme_size -gt 5000 ]; then
            echo "‚úÖ README.md is comprehensive ($readme_size bytes)"
          else
            echo "‚ö†Ô∏è README.md might need more content ($readme_size bytes)"
          fi

          # Check for Apache 2.0 license headers in documentation
          md_files=$(find . -name "*.md" -not -path "./archive/*" -not -path "./.git/*")
          files_with_headers=0
          total_md_files=0

          for file in $md_files; do
            total_md_files=$((total_md_files + 1))
            if grep -q "Apache License, Version 2.0" "$file"; then
              files_with_headers=$((files_with_headers + 1))
            fi
          done

          coverage_percent=$((files_with_headers * 100 / total_md_files))
          echo "üìÑ License header coverage: $files_with_headers/$total_md_files files ($coverage_percent%)"

          if [ $coverage_percent -ge 80 ]; then
            echo "‚úÖ Good license header coverage"
          else
            echo "‚ö†Ô∏è Consider adding license headers to more files"
          fi

      # SECTION: Check for sensitive data
      - name: Check for sensitive data
        run: |
          echo "üîí Checking for sensitive data..."

          # Patterns to check for sensitive data
          sensitive_patterns=("password" "secret" "token" "api.key" "connection.string")

          # Files to check
          files_to_check=$(find . -type f \( -name "*.md" -o -name "*.json" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*")

          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            matches=$(grep -ri "$pattern" $files_to_check | grep -v "example\|placeholder\|# Example\|TODO" || true)
            if [ -n "$matches" ]; then
              echo "‚ö†Ô∏è Found potential sensitive data pattern '$pattern':"
              echo "$matches"
              found_sensitive=true
            fi
          done

          if [ "$found_sensitive" = false ]; then
            echo "‚úÖ No obvious sensitive data patterns found"
          else
            echo "‚ùå Please review and remove any actual sensitive data"
          fi

      # SECTION: Validate links in documentation
      - name: Validate links in documentation
        run: |
          echo "üîó Checking links in documentation..."

          # Install markdown-link-check if available
          if command -v npm &> /dev/null; then
            npm install -g markdown-link-check

            # Check main documentation files
            important_files=("README.md" "CONTRIBUTING.md" "SECURITY.md")

            for file in "${important_files[@]}"; do
              if [ -f "$file" ]; then
                echo "Checking links in $file..."
                markdown-link-check "$file" --config .github/markdown-link-check.json || true
              fi
            done
          else
            echo "‚ÑπÔ∏è npm not available, skipping link check"
          fi

      # SECTION: Check Git repository health
      - name: Check Git repository health
        run: |
          echo "üìù Checking Git repository health..."

          # Check for recent commits
          commit_count=$(git rev-list --count HEAD)
          echo "üìä Total commits: $commit_count"

          if [ $commit_count -gt 10 ]; then
            echo "‚úÖ Repository has good commit history"
          else
            echo "‚ÑπÔ∏è Repository is relatively new"
          fi

          # Check branch structure
          branch_count=$(git branch -r | wc -l)
          echo "üåø Remote branches: $branch_count"

          # Check for large files
          large_files=$(find . -type f -size +10M -not -path "./.git/*" || true)
          if [ -n "$large_files" ]; then
            echo "‚ö†Ô∏è Large files found (>10MB):"
            echo "$large_files"
          else
            echo "‚úÖ No large files detected"
          fi

      # SECTION: Generate health report
      - name: Generate health report
        run: |
          echo "üìä Generating repository health report..."

          # Create a simple health report
          cat > health-report.md << 'EOF'
          # Repository Health Report

          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}

          ## Summary
          This automated health check validates:
          - ‚úÖ Repository structure and required files
          - ‚úÖ Documentation completeness and quality
          - ‚úÖ License compliance (Apache 2.0)
          - ‚úÖ Security best practices
          - ‚úÖ Git repository health

          ## Recommendations
          1. Maintain comprehensive documentation
          2. Keep license headers up to date
          3. Regular security reviews
          4. Follow consistent commit practices

          ---
          *This report was generated automatically by GitHub Actions*
          EOF

          echo "‚úÖ Health report generated"

      # SECTION: Upload health report
      - name: Upload health report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: repository-health-report
          path: health-report.md
          retention-days: 30
